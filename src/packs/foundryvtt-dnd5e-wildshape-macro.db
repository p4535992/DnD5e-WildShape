{"_id":"bNQBX7TnJMkP2Wsb","name":"WildShape Effect Macro","permission":{"default":0,"gz5bbhiTO9Y5saZX":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.t19ZMblmqtt34NGb"}},"scope":"global","command":"let target = canvas.tokens.controlled[0]\nlet actorOriginalFormId = args[1]\nlet actorOriginalForm = game.actors.get(actorOriginalFormId)\nlet actorOriginalFormName = actorOriginalForm.data.name\nlet actorOriginalFormImagePath = args[2]\nlet actorNewForm = game.actors.get(args[3])\nlet actorNewShapeName = args[4]\nlet transferDAEEffects = async function () {\n    if (actor.data.flags.dnd5e?.isPolymorphed) {\n        let actorNewShape = game.actors.getName(actorNewShapeName)\n        let actorNewShapeEffectsData = actorNewShape.effects.map(ef => ef.data)\n        await actorOriginalForm.createEmbeddedEntity(\"ActiveEffect\", actorNewShapeEffectsData)\n    }\n}\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms))\nif (actor.data.flags.dnd5e?.isPolymorphed && args[0] === \"off\") {\n    actorOriginalFormImagePath = actorOriginalForm.data.token.img\n    let paramsBack =\n        [{\n            filterType: \"polymorph\",\n            filterId: \"polymorphToOriginalForm\",\n            type: 6,\n            padding: 70,\n            magnify: 1,\n            imagePath: actorOriginalFormImagePath,\n            animated:\n            {\n                progress:\n                {\n                    active: true,\n                    animType: \"halfCosOscillation\",\n                    val1: 0,\n                    val2: 100,\n                    loops: 1,\n                    loopDuration: 1000\n                }\n            }\n        }]\n    target.update({\n        \"width\": actorOriginalForm.data.token.width,\n        \"height\": actorOriginalForm.data.token.height\n    })\n    async function backAnimation() {\n        await Hooks.once(\"sightRefresh\", async function () {\n            await token.TMFXdeleteFilters(\"polymorphToOriginalForm\")\n        });\n        await token.TMFXhasFilterId(\"polymorphToOriginalForm\")\n        await token.TMFXaddUpdateFilters(paramsBack)\n        await delay(1100)\n        await actor.revertOriginalForm()\n    }\n    backAnimation()\n}","author":"gz5bbhiTO9Y5saZX","img":"systems/dnd5e/icons/skills/green_09.jpg","actorIds":[]}
{"_id":"rIuvnLvHOebVtPGM","name":"WildShape Macro","permission":{"default":0,"gz5bbhiTO9Y5saZX":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.Gjc7q8WnMVf0C2P3"}},"scope":"global","command":"// Name of the folder in which the beasts are located\nlet beastsFolder = \"Beasts\"\n\n// Name of your WildShape Effect\nlet wildShapeEffectName = \"WildShape Effect\"\n\n/////////////////////////////////////////////////////\n\n// Declare the target\nlet target = canvas.tokens.controlled[0]\n\n// Get the ID of your the actual target (current Actor Form)\nlet currentFormActorId = target.actor.data._id\n\n// Declare my WildShape transformation function\nlet wildShapeTransform = async function (actorOriginalForm, actorNewFormId) {\n\n    // Image's Token associated with the original actor form\n    let actorOriginalFormImagePath = actorOriginalForm.data.token.img\n\n    // Get the New Form Actor\n    let actorNewForm = game.actors.get(actorNewFormId)\n    // Set the token rotation to default value\n    actorNewForm._data.token.rotation = 0\n    // Image's Token associated with the new actor form\n    let actorNewFormImagePath = actorNewForm.data.token.img\n\n    // Get the New Shape Actor Name\n    let actorNewShapeName = actorOriginalForm.data.name + ' (' + actorNewForm.data.name + ')'\n\n    // Declare the polymorph function\n    let actorPolymorphism = async function () {\n        // For actorNewForm, the ratio's Token scale should be the same of the original form\n        actor.transformInto(actorNewForm, {\n            keepMental: true,\n            mergeSaves: true,\n            mergeSkills: true,\n            keepBio: true,\n            keepClass: true,\n        })\n    }\n\n    // Declare the WildShape Effect\n    let applyWildShapeEffect = {\n        label: wildShapeEffectName,\n        icon: \"systems/dnd5e/icons/skills/green_13.jpg\",\n        changes: [{\n            \"key\": \"macro.execute\",\n            \"mode\": 1,\n            \"value\": `\"WildShape Effect Macro\"` + `\"${currentFormActorId}\"` + `\"${actorOriginalFormImagePath}\"` + `\"${actorNewFormId}\"` + `\"${actorNewShapeName}\"`,\n            \"priority\": \"20\"\n        }],\n        duration: {\n            \"seconds\": 7200,\n        }\n    }\n    // Declare the delay variable to adjust with animation\n    const delay = ms => new Promise(resolve => setTimeout(resolve, ms))\n\n    // If not already polymorphed, launch startAnimation function\n    if (!actor.data.flags.dnd5e?.isPolymorphed) {\n        let paramsStart = [{\n            filterType: \"polymorph\",\n            filterId: \"polymorphToNewForm\",\n            type: 6,\n            padding: 70,\n            magnify: 1,\n            imagePath: actorNewFormImagePath,\n            animated:\n            {\n                progress:\n                {\n                    active: true,\n                    animType: \"halfCosOscillation\",\n                    val1: 0,\n                    val2: 100,\n                    loops: 1,\n                    loopDuration: 1000\n                }\n            },\n            autoDisable: false,\n            autoDestroy: false\n        }]\n\n        target.update({\n            \"width\": actorNewForm.data.token.width,\n            \"height\": actorNewForm.data.token.height\n        })\n        async function startAnimation() {\n            await Hooks.once(\"createActiveEffect\", async function () {\n                await token.TMFXdeleteFilters(\"polymorphToNewForm\")\n            });\n            await token.TMFXhasFilterId(\"polymorphToNewForm\")\n            await TokenMagic.addUpdateFilters(target, paramsStart)\n            await delay(1100)\n            await actorPolymorphism()\n            await Hooks.once(\"sightRefresh\", async function () {\n                let actorNewShape = game.actors.getName(actorNewShapeName)\n                await actorNewShape.createEmbeddedEntity(\"ActiveEffect\", applyWildShapeEffect)\n            });\n        }\n        startAnimation()\n        // If actor is polymorphed, launch backAnimation function\n    } else {\n        // Image's Token associated with the original actor form\n        actorOriginalFormImagePath = actorOriginalForm.data.token.img\n        let paramsBack =\n            [{\n                filterType: \"polymorph\",\n                filterId: \"polymorphToOriginalForm\",\n                type: 6,\n                padding: 70,\n                magnify: 1,\n                imagePath: actorOriginalFormImagePath,\n                animated:\n                {\n                    progress:\n                    {\n                        active: true,\n                        animType: \"halfCosOscillation\",\n                        val1: 0,\n                        val2: 100,\n                        loops: 1,\n                        loopDuration: 1000\n                    }\n                }\n            }]\n        target.update({\n            \"width\": actorOriginalForm.data.token.width,\n            \"height\": actorOriginalForm.data.token.height\n        })\n        async function backAnimation() {\n            await token.TMFXdeleteFilters(\"polymorphToOriginalForm\")\n            await token.TMFXhasFilterId(\"polymorphToOriginalForm\")\n            await token.TMFXaddUpdateFilters(paramsBack)\n            await delay(1100)\n            await actor.revertOriginalForm()\n            await token.TMFXdeleteFilters(\"polymorphToOriginalForm\")\n        }\n        backAnimation()\n    }\n}\n\n// If not already polymorphed, display the dialog box\nif (!actor.data.flags.dnd5e?.isPolymorphed) {\n    let actorOriginalForm = game.actors.get(currentFormActorId)\n    let selectBeasts = '<form><div class=\"form-group\"><label>Choose the beast: </label><select id=\"wildShapeBeasts\">';\n    game.folders.getName(beastsFolder).content.forEach(function (beast) {\n        let optBeast = '<option value=\"' + beast.data._id + '\">' + beast.data.name + '</option>';\n        selectBeasts += optBeast;\n    });\n    selectBeasts += '</select></div></form>'\n    new Dialog({\n        title: \"DnD5e-WildShape\",\n        content: selectBeasts,\n        buttons: {\n            yes: {\n                icon: '<i class=\"fas fa-paw\"></i>',\n                label: \"Roar!\",\n                callback: () => {\n                    // Get the New Form Actor ID\n                    let actorNewFormId = $('#wildShapeBeasts').find(\":selected\").val();\n                    wildShapeTransform(actorOriginalForm, actorNewFormId);\n                }\n            }\n        }\n    }).render(true);\n    // Else, launch the WildShape transformation function\n} else {\n    let actorOriginalId = game.actors.get(currentFormActorId)._data.flags.dnd5e.originalActor\n    let actorOriginalForm = game.actors.get(actorOriginalId)\n    let actorNewFormId = _token.actor.data._id\n    wildShapeTransform(actorOriginalForm, actorNewFormId);\n}","author":"gz5bbhiTO9Y5saZX","img":"systems/dnd5e/icons/skills/green_13.jpg","actorIds":[]}
